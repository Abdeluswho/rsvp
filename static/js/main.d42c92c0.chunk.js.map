{"version":3,"sources":["Header/GuestInput.js","Header/index.js","MainContent/Counter.js","MainContent/GuestList/GuestName.js","MainContent/GuestList/Guest.js","MainContent/GuestList/PendingGuest.js","MainContent/GuestList/index.js","MainContent/ConfirmedFilter.js","MainContent/index.js","App.js","serviceWorker.js","index.js"],"names":["GuestInput","props","onSubmit","submitHandler","type","onChange","inputChange","value","pendingGuest","placeholder","name","Header","Counter","className","numberAttending","numberUnconfirmed","totalInvited","GuestName","isEditing","children","handleNameEdits","prototype","Proptypes","bool","isRequired","func","Guest","isConfirmed","handleConfirmation","handleToggleEditing","setName","handleRemove","e","target","checked","onClick","PendingGuest","GuestList","guests","filter","guest","isFiltered","map","index","key","toggleConfirmationAt","toggleEditingAt","text","setNameAt","removeGuestAt","ConfirmedFilter","toggleFilter","MainContent","App","state","togglePropertyAt","property","indexToChange","setState","slice","handleNewGuest","handleNewGuestSubmit","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d42c92c0.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GuestInput = props => \n    <form onSubmit = { props.submitHandler }>\n        <input \n            type=\"text\" \n            onChange = { props.inputChange }\n            value= { props.pendingGuest } \n            placeholder=\"Invite Someone\" \n\n        />\n        <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n    </form>\n\nGuestInput.propTypes = {\n    submitHandler:PropTypes.func.isRequired,\n    inputChange: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n}\n\n\nexport default GuestInput","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nimport GuestInput from './GuestInput'\n\n\nconst Header = ( { pendingGuest, inputChange, submitHandler} ) => \n    <header>\n        <h1>RSVP</h1>\n        <p>A Treehouse App</p>\n\n        <GuestInput \n            pendingGuest = { pendingGuest }\n            inputChange = { inputChange }\n            submitHandler = { submitHandler }\n        />\n\n    </header>\n\nHeader.propTypes = {\n    pendingGuest: PropTypes.string.isRequired,\n    inputChange: PropTypes.func.isRequired,\n    submitHandler: PropTypes.func.isRequired\n}\n\nexport default Header","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Counter = props => \n    <table className=\"counter\">\n        <tbody>\n            <tr>\n                <td>Attending:</td>\n                <td> { props.numberAttending } </td>\n            </tr>\n            <tr>\n                <td>Unconfirmed:</td>\n                <td> { props.numberUnconfirmed } </td>\n            </tr>\n            <tr>\n                <td>Total:</td>\n                <td>{ props.totalInvited }</td>\n            </tr>\n        </tbody>\n    </table>\n\nCounter.propTypes = {\n    numberAttending: PropTypes.number,\n    numberUnconfirmed: PropTypes.number,\n    totslInvited: PropTypes.number\n}\n\nexport default Counter","import React from 'react'\nimport Proptypes from 'prop-types'\n\n\nconst GuestName = (props) =>  {\n   return props.isEditing \n            ?  \n              (<input \n                    type = \"text\" \n                    value= { props.children }\n                    onChange = { props.handleNameEdits }\n                />)\n            :  <span> { props.children } </span> \n\n        \n}\n   \nGuestName.prototype = {\n    isEditing: Proptypes.bool.isRequired,\n    handleNameEdits: Proptypes.func.isRequired\n}\n\nexport default GuestName","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport GuestName from './GuestName'\n\n\nconst Guest = ({ name, isConfirmed, isEditing, handleConfirmation, handleToggleEditing, setName, handleRemove }) =>  \n\n            <li>\n                <GuestName \n                    isEditing = { isEditing }\n                    handleNameEdits = { e =>  setName(e.target.value)}\n                >\n                    { name }\n                </GuestName>\n                <label>\n                    <input \n                        type=\"checkbox\"\n                        checked = { isConfirmed }\n                        onChange = { handleConfirmation } /> Confirmed\n                </label>\n                <button onClick = { handleToggleEditing } >{ isEditing ? \"Save\" : \"Edit\" }</button>\n                <button onClick = { handleRemove }>remove</button>\n            </li>\n\nGuest.propTypes = {\n    name: PropTypes.string.isRequired,\n    isConfirmed: PropTypes.bool.isRequired,\n    isEditing: PropTypes.bool.isRequired,\n    handleConfirmation : PropTypes.func.isRequired,\n    handleToggleEditing: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nexport default Guest","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst PendingGuest = props => {\n\n    if (props.name) {\n        return (\n            <li className = \"pending\">\n                <span>\n                    { props.name }\n                </span>\n            </li>\n        )\n    }\n    return null\n}\n\n  \n\n\n PendingGuest.propTypes = {\n    name: PropTypes.string.isRequired\n}\n\nexport default PendingGuest","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Guest from './Guest'\nimport PendingGuest from './PendingGuest'\n\nconst GuestList = props =>  \n\n    <ul>\n        <PendingGuest name = { props.pendingGuest } />\n        { props.guests\n            .filter(guest => !props.isFiltered || guest.isConfirmed)\n            .map((guest, index) => \n            <Guest \n                name= { guest.name } \n                key = { index } \n                isConfirmed = { guest.isConfirmed }\n                isEditing = { guest.isEditing }\n                handleConfirmation = { () => props.toggleConfirmationAt(index) }\n                handleToggleEditing = { () => props.toggleEditingAt(index) }\n                setName = { text => props.setNameAt(text, index) }\n                handleRemove = { () => props.removeGuestAt(index) } />\n        )}\n    </ul>\n\nGuestList.propTypes = {\n    guests: PropTypes.array.isRequired,\n    toggleConfirmationAt: PropTypes.func.isRequired,\n    toggleEditingAt: PropTypes.func.isRequired,\n    setNameAt: PropTypes.func.isRequired,\n    removeGuestAt: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n    PendingGuest: PropTypes.string\n}\n\nexport default GuestList","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ConfirmedFilter = props => \n\n    <div>\n        <h2>Invitees</h2>\n            <label>\n                <input \n                    type=\"checkbox\" \n                    onChange = { props.toggleFilter }\n                    checked = { props.isFiltered }\n                /> \n                \n                Hide those who haven't responded \n            </label>\n    </div>\n\nConfirmedFilter.propTypes = { \n    toggleFilter: PropTypes.func,\n    isFiltered: PropTypes.bool.isRequired\n}\n\nexport default ConfirmedFilter","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Counter from './Counter'\nimport GuestList from './GuestList';\nimport ConfirmedFilter from './ConfirmedFilter'\n\nconst MainContent = props => \n    <div className=\"main\">\n          <ConfirmedFilter \n            toggleFilter = { props.toggleFilter }\n            isFiltered = { props.isFiltered }\n          />\n\n          <Counter \n            totalInvited = { props.totalInvited }\n            numberAttending = { props.numberAttending }\n            numberUnconfirmed = { props.numberUnconfirmed }\n          />\n\n          <GuestList \n              guests = {props.guests}\n              pendingGuest = { props.pendingGuest }\n              isFiltered = { props.isFiltered }\n              toggleConfirmationAt = { props.toggleConfirmationAt }\n              toggleEditingAt = { props.toggleEditingAt }\n              setNameAt = { props.setNameAt }\n              removeGuestAt = { props.removeGuestAt } \n          \n          />\n    </div>\n\nMainContent.propTypes= {\n  toggleFilter: PropTypes.func,\n  isFiltered: PropTypes.bool.isRequired,\n  totalInvited: PropTypes.number.isRequired,\n  numberAttending: PropTypes.number.isRequired,\n  numberUnconfirmed: PropTypes.number.isRequired,\n  guests: PropTypes.array.isRequired,\n  pendingGuest: PropTypes.string.isRequired,\n  toggleConfirmationAt: PropTypes.func.isRequired,\n  toggleEditingAt: PropTypes.func.isRequired,\n  setNameAt: PropTypes.func.isRequired,\n  removeGuestAt: PropTypes.func.isRequired\n}\n\n\nexport default MainContent","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header'\nimport MainContent from './MainContent';\n\n\nclass App extends Component {\n  \n  state = {\n    isFiltered: false,\n    pendingGuest: '',\n    guests: [\n      {\n        name: 'Treasure',\n        isConfirmed: false,\n        isEditing: false\n      },\n      {\n        name: 'Nick',\n        isConfirmed: true,\n        isEditing: false\n      },\n      {\n        name: 'Sofiane',\n        isConfirmed: false,\n        isEditing: true\n      }\n    ]\n  }\n\n  togglePropertyAt = (property, indexToChange) => \n    this.setState({\n      guests: this.state.guests.map((guest, index) => {\n        if(index === indexToChange) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          }\n        }\n\n        return guest\n      })\n    })\n  \n  toggleConfirmationAt = index => \n    this.togglePropertyAt('isConfirmed', index)\n\n  removeGuestAt = index => \n    this.setState({\n      guests: [\n        ...this.state.guests.slice(0, index),\n        ...this.state.guests.slice(index+1)\n      ]\n    })\n\n  toggleEditingAt = index => \n    this.togglePropertyAt('isEditing', index)\n\n  setNameAt = (name, indexToChange) => \n    this.setState({\n      guests: this.state.guests.map((guest, index) => {\n        if(index === indexToChange) {\n          return {\n            ...guest,\n            name\n          }\n        }\n\n        return guest\n      })\n    })\n\n  toggleFilter = () => \n    this.setState({ isFiltered : !this.state.isFiltered})\n\n  handleNewGuest = e =>{\n    this.setState({ pendingGuest: e.target.value })\n  }\n\n  handleNewGuestSubmit = e => {\n    e.preventDefault()\n    this.setState({ \n      guests: [\n        {\n          name: this.state.pendingGuest,\n          isConfirmed: false,\n          isEditing: false\n\n        },\n        ...this.state.guests\n      ],\n      pendingGuest: ''\n     })\n  }\n\n  getTotalInvited = () =>  this.state.guests.length;\n\n  getAttendingGuests= () => \n    this.state.guests.reduce(\n      (total, guest) => guest.isConfirmed ? total + 1 : total ,0)\n  \n\n  render () {\n    const totalInvited = this.getTotalInvited()\n    const numberAttending = this.getAttendingGuests()\n    const numberUnconfirmed =  totalInvited - numberAttending \n            \n    return (\n      <div className=\"App\">\n        <Header \n          pendingGuest = { this.state.pendingGuest }\n          inputChange = { this.handleNewGuest }\n          submitHandler = { this.handleNewGuestSubmit }\n        />\n\n        <MainContent \n          totalInvited = { totalInvited }\n          numberAttending = { numberAttending }\n          numberUnconfirmed = { numberUnconfirmed }\n          guests = {this.state.guests}\n          pendingGuest = { this.state.pendingGuest }\n          isFiltered = { this.state.isFiltered }\n          toggleConfirmationAt = { this.toggleConfirmationAt }\n          toggleEditingAt = { this.toggleEditingAt }\n          toggleFilter = { this.toggleFilter }\n          setNameAt = { this.setNameAt }\n          removeGuestAt = { this.removeGuestAt } \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}